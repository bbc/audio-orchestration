@startuml

participant App as "Client Application"
participant Synchroniser as "Cloud Synchroniser"
participant Service as "Cloud-Sync Service"

note over Synchroniser #aqua

    **What happened so far?**
    - The //Client Application// presents a media object (e.g. plays back video)
    - The //Client Application// created a media-timeline clock from the media object
    - The //Client Application// locked the media object to the media-timeline clock
    - The //Client Application// created a Cloud-Synchroniser object using the respective
      factory method of the CloudSynckit module

    **What happens in the below sequence?**
    - The //Client Application// asks the Cloud Synchroniser to synchronise the 
      media-timeline clock
    - The //Cloud Synchroniser// registers the media-timeline clock at the Cloud-Sync Service
      and asks the Cloud-Sync Service to consider it for sync-timeline clock election
    - The //Cloud-Sync Service// elects a timeline and notifies the CloudSynchroniser that a
      sync timeline is available
    - The //Cloud Synchroniser// creates a sync-timeline-clock shadow 
    - The //Cloud Synchroniser// pairs the media-timeline clock and the sync-timeline clock
    - The //Cloud Synchroniser// requests the Cloud-Sync Service to send updates of the 
      sync-timeline clock
    - The //Cloud Synchroniser// notifies the Client Application, that the media-timeline clock
      is now synchronised
end note



App -> Synchroniser: synchronise(mediaTimelineClock)

activate Synchroniser
Synchroniser -> Service: TimelineRegistrationREQ(mediaTimelineClock)

activate Service
Service --> Synchroniser: TimelineRegistrationRESP('OK')
Service -> Service: electSyncTimeline(registeredTimelines)
Service --> Synchroniser: SyncTimelinesAvailable(syncTimelines)
deactivate Service

Synchroniser -> Synchroniser: createClock(syncTimeline)
Synchroniser -> Synchroniser: pairTimelines(syncTimelineClock, mediaTimelineClock)

activate Service
Synchroniser -> Service: TimelineSubscriptionREQ(syncTimeline)
Service --> Synchroniser: TimelineSubscriptionRESP('OK')
Synchroniser --> App: emit('TimelineClockSynchronised', mediaTimelineClock)

loop
    Service --> Synchroniser: TimelineUpdate(corr(syncTimeline))
end
deactivate Service
deactivate Synchroniser









note over Synchroniser #aqua
    
    **What happens if ... ?**
    - __The sync-timeline clock changes__:
        - The //Cloud Synchroniser// checks if the change, if applied to the
          media-timeline clock, would cause a significant change of the media-timeline
          clock
        - If so, it applies the change
    - __The media-timeline clock changes__:
        - The //Cloud Synchroniser// checks if the change, if propargated to the
          sync-timeline clock, would cause a significant change of the sync-timeline
          clock
        - If so, the //Cloud Synchroniser// sends a timeline-update message to the 
          Cloud-Sync Service
    
    ** And what happens if ... ?**
    - __The User or the User Agent changes the media object__:
        - Reasons could be:
            - User pauses video playback
            - User Agent stalls the playback as it can not download the video
        - The behaviour may differ from application to application. There may be
          appications that want:
            - __Changes of a single media object to be propargated to all other clients__
              (scenario: People are watching an on-demand movie 'appart together'.
              User A pauses the playback. For the users, waiting is no problem,
              as the focus of the experience is on watching together.)
            - __Changes of a single media object to be ignored by all other clients__
              (scenario: people are watching a live event 'appart together'. User A pauses
              the playback. The media playback on all other clients is unaffected
              as users want to watch things 'as they happen'.)
            - ...
end note



@enduml