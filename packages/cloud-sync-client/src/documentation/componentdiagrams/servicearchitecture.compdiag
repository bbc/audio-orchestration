@startuml

database "Redis" {
    queue "SyncController Task Queue"
    database "Timelines"
    queue "Processing Queue"
}

node "SyncController Pool" {
    [Sync Controller]
}

[Processing Queue] <-- [Sync Controller]
[Timelines] <--> [Timeline Observer]: Timelines[],\n SyncTmelines[]
[SyncController Task Queue] <-- [Timeline Observer]: TimelineChangeEvent,\n TimelineSourceDispExceeded
[SyncController Task Queue] --> [Sync Controller]: task
[SyncController Task Queue] <-- [Session Controller]: NewTimeline,\n TimelineDeleted


[Timeline Observer] <-- [MQTT Broker]
[Session Controller] <-- [MQTT Broker]
[Sync Controller] --> [MQTT Broker]: SyncTimelineAvailable,\n SyncTimelineUpdate

[MQTT Broker] <-- [Client 1]
[MQTT Broker] <-- [Client 2]
[MQTT Broker] <-- [Client 3]

note left of [Client 1]
    Clients:
    - Create media clocks
    - Media presentation is locked
      to the media clock
    - Register media clock as timelines
      ('useForSessionSync')
    - Sync service elects sync timeline
      from these timelines and notifies
      clients ('SyncTimelineAvailable')
    - Clients create a local copy of the
      sync timeline and lock their media
      clocks to it
end note

@enduml