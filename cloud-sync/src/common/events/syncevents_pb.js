/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CorrelationTimestamp', null, global);
goog.exportSymbol('proto.DelSyncTLEvent', null, global);
goog.exportSymbol('proto.EventType', null, global);
goog.exportSymbol('proto.Header', null, global);
goog.exportSymbol('proto.NewSyncTLEvent', null, global);
goog.exportSymbol('proto.PresentationTimestamp', null, global);
goog.exportSymbol('proto.SyncEvent', null, global);
goog.exportSymbol('proto.TimelineStateChange', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Header = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Header, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Header.displayName = 'proto.Header';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Header.prototype.toObject = function(opt_includeInstance) {
  return proto.Header.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Header} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Header.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: msg.getEventtype(),
    sessionid: msg.getSessionid(),
    senderid: msg.getSenderid(),
    version: msg.getVersion(),
    eventid: msg.getEventid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Header}
 */
proto.Header.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Header;
  return proto.Header.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Header} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Header}
 */
proto.Header.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.EventType} */ (reader.readEnum());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Header} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Header.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Header.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Header.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getSessionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getSenderid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getEventid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Header} The clone.
 */
proto.Header.prototype.cloneMessage = function() {
  return /** @type {!proto.Header} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional EventType eventType = 1;
 * @return {!proto.EventType}
 */
proto.Header.prototype.getEventtype = function() {
  return /** @type {!proto.EventType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.EventType} value  */
proto.Header.prototype.setEventtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string sessionId = 2;
 * @return {string}
 */
proto.Header.prototype.getSessionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Header.prototype.setSessionid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string senderId = 3;
 * @return {string}
 */
proto.Header.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Header.prototype.setSenderid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.Header.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Header.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string eventId = 5;
 * @return {string}
 */
proto.Header.prototype.getEventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.Header.prototype.setEventid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SyncEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SyncEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SyncEvent.displayName = 'proto.SyncEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SyncEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.SyncEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SyncEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SyncEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && proto.Header.toObject(includeInstance, f),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SyncEvent}
 */
proto.SyncEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SyncEvent;
  return proto.SyncEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SyncEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SyncEvent}
 */
proto.SyncEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Header;
      reader.readMessage(value,proto.Header.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SyncEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SyncEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SyncEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SyncEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Header.serializeBinaryToWriter
    );
  }
  f = this.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SyncEvent} The clone.
 */
proto.SyncEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.SyncEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Header header = 1;
 * @return {proto.Header}
 */
proto.SyncEvent.prototype.getHeader = function() {
  return /** @type{proto.Header} */ (
    jspb.Message.getWrapperField(this, proto.Header, 1));
};


/** @param {proto.Header|undefined} value  */
proto.SyncEvent.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SyncEvent.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.SyncEvent.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.SyncEvent.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.SyncEvent.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value  */
proto.SyncEvent.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PresentationTimestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PresentationTimestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PresentationTimestamp.displayName = 'proto.PresentationTimestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PresentationTimestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.PresentationTimestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PresentationTimestamp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PresentationTimestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    contenttime: msg.getContenttime(),
    wallclocktime: msg.getWallclocktime(),
    speed: msg.getSpeed(),
    dispersion: msg.getDispersion()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PresentationTimestamp}
 */
proto.PresentationTimestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PresentationTimestamp;
  return proto.PresentationTimestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PresentationTimestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PresentationTimestamp}
 */
proto.PresentationTimestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContenttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setWallclocktime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDispersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PresentationTimestamp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PresentationTimestamp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PresentationTimestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PresentationTimestamp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContenttime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = this.getWallclocktime();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = this.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = this.getDispersion();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PresentationTimestamp} The clone.
 */
proto.PresentationTimestamp.prototype.cloneMessage = function() {
  return /** @type {!proto.PresentationTimestamp} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional double contentTime = 1;
 * @return {number}
 */
proto.PresentationTimestamp.prototype.getContenttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.PresentationTimestamp.prototype.setContenttime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional double wallClockTime = 2;
 * @return {number}
 */
proto.PresentationTimestamp.prototype.getWallclocktime = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.PresentationTimestamp.prototype.setWallclocktime = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional double speed = 3;
 * @return {number}
 */
proto.PresentationTimestamp.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.PresentationTimestamp.prototype.setSpeed = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional double dispersion = 4;
 * @return {number}
 */
proto.PresentationTimestamp.prototype.getDispersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.PresentationTimestamp.prototype.setDispersion = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CorrelationTimestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CorrelationTimestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CorrelationTimestamp.displayName = 'proto.CorrelationTimestamp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CorrelationTimestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.CorrelationTimestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CorrelationTimestamp} msg The msg instance to transform.
 * @return {!Object}
 */
proto.CorrelationTimestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    actual: (f = msg.getActual()) && proto.PresentationTimestamp.toObject(includeInstance, f),
    earliest: (f = msg.getEarliest()) && proto.PresentationTimestamp.toObject(includeInstance, f),
    latest: (f = msg.getLatest()) && proto.PresentationTimestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CorrelationTimestamp}
 */
proto.CorrelationTimestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CorrelationTimestamp;
  return proto.CorrelationTimestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CorrelationTimestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CorrelationTimestamp}
 */
proto.CorrelationTimestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 2:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setEarliest(value);
      break;
    case 3:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setLatest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.CorrelationTimestamp} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.CorrelationTimestamp.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CorrelationTimestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.CorrelationTimestamp.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActual();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
  f = this.getEarliest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
  f = this.getLatest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.CorrelationTimestamp} The clone.
 */
proto.CorrelationTimestamp.prototype.cloneMessage = function() {
  return /** @type {!proto.CorrelationTimestamp} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional PresentationTimestamp actual = 1;
 * @return {proto.PresentationTimestamp}
 */
proto.CorrelationTimestamp.prototype.getActual = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 1));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.CorrelationTimestamp.prototype.setActual = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CorrelationTimestamp.prototype.clearActual = function() {
  this.setActual(undefined);
};


/**
 * optional PresentationTimestamp earliest = 2;
 * @return {proto.PresentationTimestamp}
 */
proto.CorrelationTimestamp.prototype.getEarliest = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 2));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.CorrelationTimestamp.prototype.setEarliest = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CorrelationTimestamp.prototype.clearEarliest = function() {
  this.setEarliest(undefined);
};


/**
 * optional PresentationTimestamp latest = 3;
 * @return {proto.PresentationTimestamp}
 */
proto.CorrelationTimestamp.prototype.getLatest = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 3));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.CorrelationTimestamp.prototype.setLatest = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CorrelationTimestamp.prototype.clearLatest = function() {
  this.setLatest(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NewSyncTLEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NewSyncTLEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NewSyncTLEvent.displayName = 'proto.NewSyncTLEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NewSyncTLEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.NewSyncTLEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NewSyncTLEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NewSyncTLEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerid: msg.getProviderid(),
    timelineid: msg.getTimelineid(),
    timelinetype: msg.getTimelinetype(),
    contentid: msg.getContentid(),
    frequency: msg.getFrequency(),
    channel: msg.getChannel(),
    useforsessionsync: msg.getUseforsessionsync(),
    writable: msg.getWritable(),
    timestamp: (f = msg.getTimestamp()) && proto.PresentationTimestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NewSyncTLEvent}
 */
proto.NewSyncTLEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NewSyncTLEvent;
  return proto.NewSyncTLEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NewSyncTLEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NewSyncTLEvent}
 */
proto.NewSyncTLEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrequency(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseforsessionsync(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWritable(value);
      break;
    case 9:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.NewSyncTLEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewSyncTLEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NewSyncTLEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.NewSyncTLEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getProviderid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getContentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getFrequency();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getChannel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getUseforsessionsync();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getWritable();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.NewSyncTLEvent} The clone.
 */
proto.NewSyncTLEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.NewSyncTLEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string providerId = 1;
 * @return {string}
 */
proto.NewSyncTLEvent.prototype.getProviderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.NewSyncTLEvent.prototype.setProviderid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string timelineId = 2;
 * @return {string}
 */
proto.NewSyncTLEvent.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.NewSyncTLEvent.prototype.setTimelineid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string timelineType = 3;
 * @return {string}
 */
proto.NewSyncTLEvent.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.NewSyncTLEvent.prototype.setTimelinetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string contentId = 4;
 * @return {string}
 */
proto.NewSyncTLEvent.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.NewSyncTLEvent.prototype.setContentid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 frequency = 5;
 * @return {number}
 */
proto.NewSyncTLEvent.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.NewSyncTLEvent.prototype.setFrequency = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string channel = 6;
 * @return {string}
 */
proto.NewSyncTLEvent.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.NewSyncTLEvent.prototype.setChannel = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool useForSessionSync = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NewSyncTLEvent.prototype.getUseforsessionsync = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.NewSyncTLEvent.prototype.setUseforsessionsync = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool writable = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NewSyncTLEvent.prototype.getWritable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.NewSyncTLEvent.prototype.setWritable = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional PresentationTimestamp timestamp = 9;
 * @return {proto.PresentationTimestamp}
 */
proto.NewSyncTLEvent.prototype.getTimestamp = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 9));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.NewSyncTLEvent.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.NewSyncTLEvent.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DelSyncTLEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DelSyncTLEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DelSyncTLEvent.displayName = 'proto.DelSyncTLEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DelSyncTLEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.DelSyncTLEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DelSyncTLEvent} msg The msg instance to transform.
 * @return {!Object}
 */
proto.DelSyncTLEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    timelineid: msg.getTimelineid(),
    providerid: msg.getProviderid(),
    timelinetype: msg.getTimelinetype(),
    contentid: msg.getContentid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DelSyncTLEvent}
 */
proto.DelSyncTLEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DelSyncTLEvent;
  return proto.DelSyncTLEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DelSyncTLEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DelSyncTLEvent}
 */
proto.DelSyncTLEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.DelSyncTLEvent} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelSyncTLEvent.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DelSyncTLEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.DelSyncTLEvent.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getProviderid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getContentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.DelSyncTLEvent} The clone.
 */
proto.DelSyncTLEvent.prototype.cloneMessage = function() {
  return /** @type {!proto.DelSyncTLEvent} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string timelineId = 1;
 * @return {string}
 */
proto.DelSyncTLEvent.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.DelSyncTLEvent.prototype.setTimelineid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string providerId = 2;
 * @return {string}
 */
proto.DelSyncTLEvent.prototype.getProviderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.DelSyncTLEvent.prototype.setProviderid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string timelineType = 3;
 * @return {string}
 */
proto.DelSyncTLEvent.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.DelSyncTLEvent.prototype.setTimelinetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string contentId = 4;
 * @return {string}
 */
proto.DelSyncTLEvent.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.DelSyncTLEvent.prototype.setContentid = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimelineStateChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimelineStateChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimelineStateChange.displayName = 'proto.TimelineStateChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimelineStateChange.prototype.toObject = function(opt_includeInstance) {
  return proto.TimelineStateChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimelineStateChange} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TimelineStateChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceid: msg.getSourceid(),
    contentid: msg.getContentid(),
    timelineid: msg.getTimelineid(),
    timelinetype: msg.getTimelinetype(),
    previous: (f = msg.getPrevious()) && proto.PresentationTimestamp.toObject(includeInstance, f),
    actual: (f = msg.getActual()) && proto.PresentationTimestamp.toObject(includeInstance, f),
    earliest: (f = msg.getEarliest()) && proto.PresentationTimestamp.toObject(includeInstance, f),
    latest: (f = msg.getLatest()) && proto.PresentationTimestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimelineStateChange}
 */
proto.TimelineStateChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimelineStateChange;
  return proto.TimelineStateChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimelineStateChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimelineStateChange}
 */
proto.TimelineStateChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelineid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimelinetype(value);
      break;
    case 5:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setPrevious(value);
      break;
    case 6:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setActual(value);
      break;
    case 7:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setEarliest(value);
      break;
    case 8:
      var value = new proto.PresentationTimestamp;
      reader.readMessage(value,proto.PresentationTimestamp.deserializeBinaryFromReader);
      msg.setLatest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.TimelineStateChange} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TimelineStateChange.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimelineStateChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.TimelineStateChange.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSourceid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getContentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTimelineid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTimelinetype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrevious();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
  f = this.getActual();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
  f = this.getEarliest();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
  f = this.getLatest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.PresentationTimestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.TimelineStateChange} The clone.
 */
proto.TimelineStateChange.prototype.cloneMessage = function() {
  return /** @type {!proto.TimelineStateChange} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sourceId = 1;
 * @return {string}
 */
proto.TimelineStateChange.prototype.getSourceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.TimelineStateChange.prototype.setSourceid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string contentId = 2;
 * @return {string}
 */
proto.TimelineStateChange.prototype.getContentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.TimelineStateChange.prototype.setContentid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string timelineId = 3;
 * @return {string}
 */
proto.TimelineStateChange.prototype.getTimelineid = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.TimelineStateChange.prototype.setTimelineid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string timelineType = 4;
 * @return {string}
 */
proto.TimelineStateChange.prototype.getTimelinetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.TimelineStateChange.prototype.setTimelinetype = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional PresentationTimestamp previous = 5;
 * @return {proto.PresentationTimestamp}
 */
proto.TimelineStateChange.prototype.getPrevious = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 5));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.TimelineStateChange.prototype.setPrevious = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TimelineStateChange.prototype.clearPrevious = function() {
  this.setPrevious(undefined);
};


/**
 * optional PresentationTimestamp actual = 6;
 * @return {proto.PresentationTimestamp}
 */
proto.TimelineStateChange.prototype.getActual = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 6));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.TimelineStateChange.prototype.setActual = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TimelineStateChange.prototype.clearActual = function() {
  this.setActual(undefined);
};


/**
 * optional PresentationTimestamp earliest = 7;
 * @return {proto.PresentationTimestamp}
 */
proto.TimelineStateChange.prototype.getEarliest = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 7));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.TimelineStateChange.prototype.setEarliest = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.TimelineStateChange.prototype.clearEarliest = function() {
  this.setEarliest(undefined);
};


/**
 * optional PresentationTimestamp latest = 8;
 * @return {proto.PresentationTimestamp}
 */
proto.TimelineStateChange.prototype.getLatest = function() {
  return /** @type{proto.PresentationTimestamp} */ (
    jspb.Message.getWrapperField(this, proto.PresentationTimestamp, 8));
};


/** @param {proto.PresentationTimestamp|undefined} value  */
proto.TimelineStateChange.prototype.setLatest = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.TimelineStateChange.prototype.clearLatest = function() {
  this.setLatest(undefined);
};


/**
 * @enum {number}
 */
proto.EventType = {
  NEW_SYNC_TIMELINE: 0,
  DEL_SYNC_TIMELINE: 1,
  TL_STATE_CHANGE: 2,
  TL_NODE_DISPERSION_EXCEEDED: 3
};

goog.object.extend(exports, proto);
